/*

Each new term in the Fibonacci sequence is generated by adding the previous 
two terms. By starting with 1 and 2, the first 10 terms will be:

1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed 
four million, find the sum of the even-valued terms.

*/

const fibonacciR = function(n) {
  if (n <= 0) {
    return 1;
  }
  return fibonacciR(n - 1) + fibonacciR(n - 2);
}

/*

Why should we take care about that
in our implementation? Basically, if we just store the value
of each index in a hash, we will avoid the computational time
of that value for the next N times.

*/

const fibonacciMemo = function(n, m) {
  let memo = m || {};

  if (memo[n]) return memo[n];
  if (n <= 0) {
    return 1;
  }
  return memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);
}


module.exports = {
  // f(n) = f(n - 1) + f(n - 2)
  solve: function() {
    const sum = fibonacciR(10);
    return sum;
    // Find fib array of n
    // sum together all even values
  }
};